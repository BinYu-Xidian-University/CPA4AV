# #########################################################################
# My configuration for concurrent program verification.
# This configuration uses BDD-analysis | Pred-Abstraction.
# #########################################################################

#include valueAnalysis-NoRefiner.properties

cpa 					= cpa.arg.ARGCPA
ARGCPA.cpa              = cpa.composite.CompositeCPA
CompositeCPA.cpas       = cpa.threadingintp.ThreadingIntpCPA,cpa.dataaccess.DataAccessCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.value.ValueAnalysisCPA, cpa.pointer2.PointerCPA

# analysis.traversal.order               	= dfs
 analysis.traversal.useReversePostorder 	= false
# analysis.traversal.useCallstack        	= true
# analysis.traversal.useReversePostorder 	= true
# analysis.traversal.order               	= bfs
analysis.checkCounterexamples = false

# bmc.addInvariantsByInduction    = false
# cpa.predicate.encodeFloatAs     = FLOAT
# cpa.predicate.encodeBitvectorAs = BITVECTOR

cpa.predicate.refinement.strategy = tree_nested

analysis.traversal.useNumberOfThreads  	= true
# analysis.entryFunction = svp_simple_015_001_main
analysis.mainFunctionNameRegex = svp_+simple_+\d+_+\d+_+main


# cpa.composite.aggregateBasicBlocks = true

# analysis.summaryEdges = true

cpa.bdd.merge 									= sep
cpa.callstack.unsupportedFunctions				= pthread_key_create, pthread_getspecific, pthread_setspecific, strcpy, platform_device_alloc, platform_device_add
cpa.composite.aggregateBasicBlocks  			= false
cpa.threadingintp.useLocalAccessLocks 			= false

cpa.threadingintp.allowMultipleLHS				= true 
cfa.useCFACloningForMultiThreadedPrograms		= true


# For interrupt
cpa.threadingintp.enableInterruptNesting = false
cpa.threadingintp.simulateInterruption = true
cpa.threadingintp.intpPriOrder = BH
cpa.threadingintp.maxInterruptLevel = 3
# cpa.threadingintp.maxInterruptLevel = 2
cpa.threadingintp.enableRepPointSelecting = false
cpa.threadingintp.maxInterruptTimesForEachFunc = 1
cpa.threadingintp.priorityFileFolder = ./test/logger/
cpa.threadingintp.priorityFileExtSuffix = _priority.txt
# cpa.threadingintp.strategy = D
cpa.threadingintp.priorityRegex = ^([a-zA-Z_]+[a-zA-Z0-9_]*)/\d+/(\d+)

# For PC-DPOR
utils.edgeinfo.buildDepGraph  = true
depgraph.cond.buildClonedFunc = true
depgraph.cond.useCondDep = false
depgraph.cond.removeIsolatedNodes = false
depgraph.cond.export = false
depgraph.cond.useSolverToCompute = true
depgraph.cond.exportDot = CondDependenceGraph.dot
cpa.por.pcdpor.depComputationStateType = BDD

cpa.locations.useIncClonedFunc			= false
cpa.threadingintp.useIncClonedFunc 			= false
depgraph.cond.buildForNoneCloneThread	= true
# cfa.cfaCloner.numberOfCopies			= 5


# disable output
# output.disable 					= false
# cpa.arg.export					= true
# cfa.export						= true
# cfa.exportPerFunction			= true
# cfa.callgraph.export			= false
# report.export					= true
# # assumptions.export				= false
# counterexample.export.enabled	= true
# statistics.export 				= true

# enable output
output.disable 					= false
cpa.arg.export					= true
cfa.export						= true
cfa.exportPerFunction			= true
cfa.callgraph.export			= true
report.export					= true
# assumptions.export				= false
counterexample.export.enabled	= true
statistics.export 				= true



cpa.arg.proofWitness			= proof.graphml
cpa.arg.proofWitness.dot		= proof.dot


# specification 	= ./specification/default.spc
# specification 	= ./specification/sv-comp-reachability.spc
limits.time.cpu	= 900s
heap = 32768M

solver.solver = SMTINTERPOL
cpa.predicate.encodeBitvectorAs = INTEGER
cpa.predicate.encodeFloatAs = RATIONAL
